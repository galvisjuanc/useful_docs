The correct option is: 6 10

10 9
10 10
6 9
6 10
5 11

public class Test{
    public static void testInts(Integer obj, int var){
        obj = var++;
        obj++;
    }
    public static void main(String[] args) {
        Integer val1 = new Integer(5);
        int val2 = 9;
        testInts(val1++, ++val2);
        System.out.println(val1+" "+val2);
    }
} 

There are multiple concepts at play here:
1. All the wrapper objects are immutable. So when you do obj++, what actually happens is something like this:
obj = new Integer( obj.intValue()  + 1);  

Hay multiples conceptos aquí:
1. Todos los objetos envueltos son inmutables. Entonces, cuando se hace un obj++, lo que sucede es algo así:
obj = new Integer( obj.intValue() + 1)

2.val1++ uses post-increment operator, which implies that you note down the current value of val1, increment it, 
and then pass the original noted down value to the method testInts. Thus, the reference value of Integer 5 is passed to testInts. 
But val1 is set to point to a new Integer object containing 6.
++val2 uses pre-increment operator, which implies that you first increment val2 and then pass the incremented value. 
Therefore, val2 is incremented to 10 and then 10 is passed to the method testInts.

2. val1++ usa operador post incremento, el cuál implica que se tome el valor actual de val1, incrementarlo y luego pasarlo al 
valor original para el metodo testInts. Entonces el valor de referencia de Integer 5 es pasado a testInts.
Pero val1 es seteado a apuntar a un nuevo Integer que vale 6.

++val2 usa operador pre increment, el cual incrementa el valor de val2 y luego pasa ese valor.
Por lo tanto, val2 es incrementado a 10 y luego 10 es pasado al método testInts.

3. Java uses pass by value semantics in method calls. In case of primitive variables, their values are passed, while 
in case of Objects, their reference values are passed.  Thus, when you assign a different object to reference 
variable in a method, the original reference variable that was passed from the calling method still points to 
the same object that it pointed to before the call.
In this question, therefore, val1 in main still points to 6 after the call to testInts returns.

3. Java utiliza el paso por el valor de la semantica en llamadas de métodos. En el caso de variables primitivas, esos valores 
son pasados, mientras que con los objetos, sus valores de referencia son pasados. Así, cuando se asigna un objeto diferente 
a referenciar una variable en un metodo, la variable de referencia original que fue pasada desde el método llamado aún apunta 
al mismo objeto que apuntaba antes de la llamada.
En este caso, val1 en el metodo main apunta aún al 6 después de la llamada del retunrs del metodo testInts.